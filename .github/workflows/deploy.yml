name: deploy terraform - nonprod

on:
  push:
    branches:
      - releases/nonprod

jobs:
  terraform:
    name: Terraform
    environment: nonprod
    defaults:
      run:
        shell: bash

    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # https://stackoverflow.com/a/64195658
    # and https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
    - name: construct short docker image tag from git sha
      run: echo "IMAGE_TAG=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

    - name: construct .tfvars
      env:
        APP_NAME: ${{vars.APP_NAME}}
        AUTOSCALING_MAX: ${{vars.AUTOSCALING_MAX || '2'}}
        AUTOSCALING_MIN: ${{vars.AUTOSCALING_MIN || '5'}}
        DB_DELETION_PROTECTION: ${{vars.DB_DELETION_PROTECTION || 'true'}}
        DB_TIER: ${{vars.DB_TIER || 'db-g1-small'}}
        GCP_PROJECT_ID: ${{vars.GCP_PROJECT_ID}}
        GCP_PROJECT_NUMBER: ${{vars.GCP_PROJECT_NUMBER}}
        IMAGE_TAG: ${{vars.IMAGE_TAG}}
        REGION: ${{vars.REGION || 'us-central1'}}
        USE_DUMMY_APPSERVER: ${{vars.USE_DUMMY_APPSERVER}}
      run: |-
        echo "app_name=$APP_NAME" >> .tfvars
        echo "autoscaling_max=$AUTOSCALING_MAX" >> .tfvars
        echo "autoscaling_min=$AUTOSCALING_MIN" >> .tfvars
        echo "db_deletion_protection=$DB_DELETION_PROTECTION" >> .tfvars
        echo "db_tier=$DB_TIER" >> .tfvars
        echo "gcp_project_id=$GCP_PROJECT_ID" >> .tfvars
        echo "gcp_project_number=$GCP_PROJECT_NUMBER" >> .tfvars
        echo "image_tag=$IMAGE_TAG" >> .tfvars
        echo "region=$GCP_REGION" >> .tfvars
        echo "use_dummy_appserver=$USE_DUMMY_APPSERVER" >> .tfvars
        cat .tfvars

    - name: auth to gcp
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.TF_PROVISIONER_SVC_ACCOUNT_KEY_JSON }}
        service_account: 'terraform-provisioner@moz-fx-future-products-nonprod.iam.gserviceaccount.com'

    - name: init cloud sdk
      uses: google-github-actions/setup-gcloud@v1

    - name: auth docker
      # note: it's important to have the regional domain here for auth to succeed
      # XXX use location var
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: pull latest image for cache
      continue-on-error: true
      # XXX use vars
      run: docker pull us-central1-docker.pkg.dev/moz-fx-future-products-nonprod/boilertest1-repo1/appserver:latest

    - name: build and push image
      # DRY_r4703 docker name and paths
      # XXX use vars
      run: |-
        docker build --file=dockerfiles/appserver --target appserver_prod -t us-central1-docker.pkg.dev/moz-fx-future-products-nonprod/boilertest1-repo1/appserver:${{ env.IMAGE_TAG }} -t us-central1-docker.pkg.dev/moz-fx-future-products-nonprod/boilertest1-repo1/appserver:latest --cache-from us-central1-docker.pkg.dev/moz-fx-future-products-nonprod/boilertest1-repo1/appserver:latest .
        docker push us-central1-docker.pkg.dev/moz-fx-future-products-nonprod/boilertest1-repo1/appserver:${{ env.IMAGE_TAG }}
        docker push us-central1-docker.pkg.dev/moz-fx-future-products-nonprod/boilertest1-repo1/appserver:latest

    - name: setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.2
        terraform_wrapper: false

    - name: terraform init
      working-directory: ./terraform/nonprod
      run: terraform init --backend-config="bucket=${{vars.BACKEND_TF_STATE_BUCKET}}"

    - name: terraform plan
      working-directory: ./terraform/nonprod
      run: terraform plan -no-color -input=false -out=tfplan -var-file=.tfvars

    - name: terraform apply
      working-directory: ./terraform/nonprod
      run: terraform apply -no-color -input=false -var-file=.tfvars tfplan

    - name: terraform outputs
      working-directory: ./terraform/nonprod
      run: terraform output -var-file=.tfvars


