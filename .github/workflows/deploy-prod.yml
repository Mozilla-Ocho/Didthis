name: deploy terraform prod # REF

# this file is duplicated per environment. please keep them in sync except
# where the specific environment is referenced per REF comments
# see doc/workflow-dry-issue.md

on:
  push:
    branches:
      - releases/prod # REF

jobs:
  terraform:
    name: Terraform
    defaults:
      run:
        shell: bash

    env:
      GH_ENV_NAME: prod # REF

    permissions:
      contents: 'read'
      id-token: 'write'
      issues: 'write'

    runs-on: ubuntu-latest
    environment: prod # REF
    steps:
    - uses: actions/checkout@v3

    - name: construct short docker image tag from git sha
      run: echo "IMAGE_TAG=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

    - name: construct docker image path
      run: echo "IMAGE_PATH=${CONCATENATED}" >> $GITHUB_ENV
      env:
        CONCATENATED: ${{format('{0}-docker.pkg.dev/{1}/{2}-repo1', vars.REGION, vars.GCP_PROJECT_ID, vars.APP_NAME)}}

    - name: check flag_destroy
      run: echo "FLAG_DESTROY=`cat terraform/${TF_VARS_FILE} | grep flag_destroy | sed 's/flag_destroy *=//' | sed 's/ //g' `" >> $GITHUB_ENV
      env:
        TF_VARS_FILE: ${{vars.TF_VARS_FILE}}

    - name: check flag_use_dummy_appserver
      run: echo "FLAG_USE_DUMMY_APPSERVER=`cat terraform/${TF_VARS_FILE} | grep flag_use_dummy_appserver | sed 's/flag_use_dummy_appserver *=//' | sed 's/ //g' `" >> $GITHUB_ENV
      env:
        TF_VARS_FILE: ${{vars.TF_VARS_FILE}}

    - name: auth to gcp
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{secrets.TF_PROVISIONER_SVC_ACCOUNT_KEY_JSON}}
        service_account: ${{secrets.TF_PROVISIONER_SVC_ACCOUNT_NAME}}

    - name: init cloud sdk
      uses: google-github-actions/setup-gcloud@v1

    - name: auth docker
      if: ${{ env.FLAG_DESTROY == 'false' && env.FLAG_USE_DUMMY_APPSERVER == 'false' }}
      # note: it's important to have the regional domain here for auth to succeed
      run: gcloud auth configure-docker ${{vars.REGION}}-docker.pkg.dev

    - name: setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.2
        terraform_wrapper: false

    - name: terraform init
      working-directory: ./terraform
      run: terraform init --backend-config="bucket=${{vars.TF_BACKEND_STATE_BUCKET}}"

    - name: terraform plan
      # we do terraform plan first so that any syntax or config errors in the
      # terraform are surfaced before having to wait for a docker build+push.
      id: plan
      working-directory: ./terraform
      run: |
        terraform plan -no-color -input=false -out=tfplan -var-file=${{vars.TF_VARS_FILE}} -var="image_tag=$IMAGE_TAG"
        echo "PLAN_OUTPUT<<EOF" >> $GITHUB_OUTPUT
        terraform show -no-color tfplan >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: pull latest image for cache
      if: ${{ env.FLAG_DESTROY == 'false' && env.FLAG_USE_DUMMY_APPSERVER == 'false' }}
      # continue on error because the first run will not have a docker repo.
      continue-on-error: true
      run: docker pull $IMAGE_PATH/appserver:latest

    - name: build and push image
      if: ${{ env.FLAG_DESTROY == 'false' && env.FLAG_USE_DUMMY_APPSERVER == 'false' }}
      # continue on error because the first run will not have a docker repo.
      run: |-
        docker build \
          --file=dockerfiles/appserver \
          --target appserver_prod \
          -t $IMAGE_PATH/appserver:$IMAGE_TAG \
          -t $IMAGE_PATH/appserver:latest \
          --cache-from $IMAGE_PATH/appserver:latest \
          --build-arg CLOUDINARY_JSON_SECRET_B64="${{secrets.CLOUDINARY_JSON_SECRET_B64}}" \
          --build-arg ZYTE_SPLASH_USERNAME="${{secrets.ZYTE_SPLASH_USERNAME}}" \
          --build-arg NEXT_PUBLIC_ENV_NAME="${{vars.NEXT_PUBLIC_ENV_NAME}}" \
          --build-arg NEXT_PUBLIC_API_ENDPOINT="${{vars.NEXT_PUBLIC_API_ENDPOINT}}" \
          --build-arg NEXT_PUBLIC_AMPLITUDE_API_KEY="${{vars.NEXT_PUBLIC_AMPLITUDE_API_KEY}}" \
          --build-arg SESSION_COOKIE_SECRET="${{secrets.SESSION_COOKIE_SECRET}}" \
          --build-arg IMAGE_TAG="$IMAGE_TAG" \
          .
        docker push $IMAGE_PATH/appserver:$IMAGE_TAG
        docker push $IMAGE_PATH/appserver:latest

    - uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ vars.DEPLOY_APPROVERS }}
        minimum-approvals: 1
        issue-title: "Deploy ${{env.IMAGE_TAG}} to ${{env.GH_ENV_NAME}}"
        issue-body: |
          Please review the terraform plan and approve or deny the deployment of ${{env.IMAGE_TAG}} to ${{env.GH_ENV_NAME}}.

          ```
          ${{steps.plan.outputs.PLAN_OUTPUT}}
          ```
        exclude-workflow-initiator-as-approver: false
        additional-approved-words: 'shipit,engage,hitit,go,gogo,gogogo'
        additional-denied-words: 'nope,nono,nonono,abort,stop'

    - name: debugging approval ticket creation failure
      if: ${{ failure() }}
      run: |
        echo "note: If the manual approval issue step failed with an error from the GitHub API and was not because of a direct rejection of the approval ticket, it is possible that the DEPLOY_APPROVERS variable in the GitHub environment needs to be updated. It must contain a comma-separated list of GitHub usernames who are valid, and have access to the repo at the level that permits them to be approvers in environments. Review the DEPLOY_APPROVERS value and ensure each username is valid and has sufficient access to the repo."

    - name: terraform apply
      working-directory: ./terraform
      run: terraform apply -no-color -input=false tfplan

    - name: terraform outputs
      working-directory: ./terraform
      run: terraform output

