# --------------------------------------------------------------
# base image, shared for dev+prod
# --------------------------------------------------------------

FROM node:20-bookworm as appserver_base

# general apt update
RUN apt-get update && apt-get install -qq -y build-essential --fix-missing --no-install-recommends

# postgres 14 client
RUN apt-get install -qq -y gnupg2 lsb-release
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list
RUN apt-get update
RUN apt-get install -y postgresql-client-14

# pm2 is a utility for process monitoring and restarting, we wrap node with it
# in dev we also use it to watch for changes to the source and restart node.
RUN yarn global add pm2

# other utils
RUN apt-get install -qq -y vim jq

# disable next telemetry signalling across the board.
ENV NEXT_TELEMETRY_DISABLED=1

ARG IMAGE_TAG=development
ENV IMAGE_TAG=$IMAGE_TAG
ENV NEXT_PUBLIC_IMAGE_TAG=$IMAGE_TAG

# appserver code is gonna be installed in /appserver
WORKDIR /appserver


# --------------------------------------------------------------
# dev image
# --------------------------------------------------------------

FROM appserver_base as appserver_dev

ENV NODE_ENV=development

CMD yarn dev

# --------------------------------------------------------------
# prod image
# --------------------------------------------------------------

FROM appserver_base as appserver_prod

ENV NODE_ENV=production

# copy package.json and yarn.lock files in and do yarn install. we do this
# before copying the code in to optimize for docker layer caching.
COPY appserver/package.json /appserver/package.json
COPY appserver/yarn.lock /appserver/yarn.lock
RUN yarn install

# copy full code in
COPY appserver /appserver

WORKDIR /appserver

# TODO: best practice is not to bake secrets into docker files, however, our
# docker repo is private to the GCP project and that's good enough for now
# until i can work out an overall better environment and secret management
# approach.
ARG CLOUDINARY_JSON_SECRET_B64
ENV CLOUDINARY_JSON_SECRET_B64=$CLOUDINARY_JSON_SECRET_B64
ARG ZYTE_SPLASH_USERNAME
ENV ZYTE_SPLASH_USERNAME=$ZYTE_SPLASH_USERNAME
ARG NEXT_PUBLIC_ENV_NAME
ENV NEXT_PUBLIC_ENV_NAME=$NEXT_PUBLIC_ENV_NAME
ARG NEXT_PUBLIC_API_ENDPOINT
ENV NEXT_PUBLIC_API_ENDPOINT=$NEXT_PUBLIC_API_ENDPOINT
ARG NEXT_PUBLIC_AMPLITUDE_API_KEY
ENV NEXT_PUBLIC_AMPLITUDE_API_KEY=$NEXT_PUBLIC_AMPLITUDE_API_KEY
ARG SESSION_COOKIE_SECRET
ENV SESSION_COOKIE_SECRET=$SESSION_COOKIE_SECRET

ARG DISCORD_CLIENT_ID
ENV NEXT_PUBLIC_DISCORD_CLIENT_ID=$DISCORD_CLIENT_ID
ENV DISCORD_CLIENT_ID=$DISCORD_CLIENT_ID
ARG DISCORD_CLIENT_SECRET
ENV DISCORD_CLIENT_SECRET=$DISCORD_CLIENT_SECRET
ARG DISCORD_BOT_GRAPHQL_ACCESS_TOKEN
ENV DISCORD_BOT_GRAPHQL_ACCESS_TOKEN=$DISCORD_BOT_GRAPHQL_ACCESS_TOKEN
ARG DISCORD_BOT_PUBLIC_UPDATES_POST_DELAY=45000
ENV DISCORD_BOT_PUBLIC_UPDATES_POST_DELAY=$DISCORD_BOT_PUBLIC_UPDATES_POST_DELAY
ENV NEXT_PUBLIC_DISCORD_BOT_PUBLIC_UPDATES_POST_DELAY=$DISCORD_BOT_PUBLIC_UPDATES_POST_DELAY

# build next.js app in production mode
RUN yarn next build

# run-time must set these env vars:
# PORT (for nodejs to listen on)
CMD yarn start

