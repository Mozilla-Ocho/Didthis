version: '3'

services:

  appserver:
    build:
      context: '.'
      dockerfile: dockerfiles/appserver
      target: appserver_dev
    networks:
      - allhosts
    volumes:
      - ./appserver:/appserver
    working_dir: /appserver
    env_file: env-dev
    environment:
      PORT: 3000
      DATABASE_URL: "postgresql://devuser:devdummypass@pgserver:5432/devdb"
      # XXX_PORTING add this to boilerplate docs for firebase, vars list etc
      GOOGLE_APPLICATION_CREDENTIALS: '/appserver/.firebase-dev-credentials.json'
    command: "yarn dev"
    ports:
      - "3000:3000"
    depends_on:
      pgserver:
        condition: service_healthy

  storybook:
    build:
      context: '.'
      dockerfile: dockerfiles/appserver
      target: appserver_dev
    networks:
      - allhosts
    volumes:
      - ./appserver:/appserver
    working_dir: /appserver
    env_file: env-dev
    environment:
      PORT: 6006
      DATABASE_URL: "postgresql://devuser:devdummypass@pgserver:5432/devdb"
      GOOGLE_APPLICATION_CREDENTIALS: '/appserver/.firebase-dev-credentials.json'
    command: "yarn storybook"
    ports:
      - "6006:6006"

  pgserver:
    image: "postgres:14"
    networks:
      - allhosts
    environment:
      POSTGRES_USER: devuser
      POSTGRES_DB: devdb
      POSTGRES_PASSWORD: devdummypass
    ports:
      - '5432:5432'
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d devdb"]
      interval: 4s
      timeout: 4s
      retries: 20

  mitmweb:
    build:
      context: '.'
      dockerfile: dockerfiles/mitmweb
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      UPSTREAM: http://appserver:3000/
    networks:
      - allhosts

networks:
  allhosts:

volumes:
  dbdata:
